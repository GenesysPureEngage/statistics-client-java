/*
 * Statistics Service
 * Statistics Service
 *
 * OpenAPI spec version: 9.0.000.27.580
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.genesys.internal.statistics.api;

import com.genesys.internal.common.ApiCallback;
import com.genesys.internal.common.ApiClient;
import com.genesys.internal.common.ApiException;
import com.genesys.internal.common.ApiResponse;
import com.genesys.internal.common.Configuration;
import com.genesys.internal.common.Pair;
import com.genesys.internal.common.ProgressRequestBody;
import com.genesys.internal.common.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.genesys.internal.statistics.model.ModelApiResponse;
import com.genesys.internal.statistics.model.PeekedStatisticResponse;
import com.genesys.internal.statistics.model.PeekedStatisticsResponse;
import com.genesys.internal.statistics.model.StatisticDataResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class StatisticsApi {
    private ApiClient apiClient;

    public StatisticsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public StatisticsApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for createSubscription
     * @param statistics Definitions of the statistics to monitor. (required)
     * @param verbose Specifies whether the Statistics API should return additional information about opened statistics in the response. Possible values are: &#x60;OFF&#x60; and &#x60;INFO&#x60;. (optional, default to INFO)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createSubscriptionCall(Object statistics, String verbose, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = statistics;

        // create path and map variables
        String localVarPath = "/subscriptions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (verbose != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("verbose", verbose));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createSubscriptionValidateBeforeCall(Object statistics, String verbose, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'statistics' is set
        if (statistics == null) {
            throw new ApiException("Missing the required parameter 'statistics' when calling createSubscription(Async)");
        }
        

        com.squareup.okhttp.Call call = createSubscriptionCall(statistics, verbose, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Open a subscription
     * Open a subscription for the specified set of statistics.
     * @param statistics Definitions of the statistics to monitor. (required)
     * @param verbose Specifies whether the Statistics API should return additional information about opened statistics in the response. Possible values are: &#x60;OFF&#x60; and &#x60;INFO&#x60;. (optional, default to INFO)
     * @return StatisticDataResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public StatisticDataResponse createSubscription(Object statistics, String verbose) throws ApiException {
        ApiResponse<StatisticDataResponse> resp = createSubscriptionWithHttpInfo(statistics, verbose);
        return resp.getData();
    }

    /**
     * Open a subscription
     * Open a subscription for the specified set of statistics.
     * @param statistics Definitions of the statistics to monitor. (required)
     * @param verbose Specifies whether the Statistics API should return additional information about opened statistics in the response. Possible values are: &#x60;OFF&#x60; and &#x60;INFO&#x60;. (optional, default to INFO)
     * @return ApiResponse&lt;StatisticDataResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<StatisticDataResponse> createSubscriptionWithHttpInfo(Object statistics, String verbose) throws ApiException {
        com.squareup.okhttp.Call call = createSubscriptionValidateBeforeCall(statistics, verbose, null, null);
        Type localVarReturnType = new TypeToken<StatisticDataResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Open a subscription (asynchronously)
     * Open a subscription for the specified set of statistics.
     * @param statistics Definitions of the statistics to monitor. (required)
     * @param verbose Specifies whether the Statistics API should return additional information about opened statistics in the response. Possible values are: &#x60;OFF&#x60; and &#x60;INFO&#x60;. (optional, default to INFO)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createSubscriptionAsync(Object statistics, String verbose, final ApiCallback<StatisticDataResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createSubscriptionValidateBeforeCall(statistics, verbose, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<StatisticDataResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteSubscription
     * @param id The ID of the subscription to delete. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteSubscriptionCall(String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{id}"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteSubscriptionValidateBeforeCall(String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteSubscription(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteSubscriptionCall(id, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete a subscription
     * Delete the specified subscription by closing all its statistics. This is a fire-and-forget operation and it always returns a success response.
     * @param id The ID of the subscription to delete. (required)
     * @return ModelApiResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ModelApiResponse deleteSubscription(String id) throws ApiException {
        ApiResponse<ModelApiResponse> resp = deleteSubscriptionWithHttpInfo(id);
        return resp.getData();
    }

    /**
     * Delete a subscription
     * Delete the specified subscription by closing all its statistics. This is a fire-and-forget operation and it always returns a success response.
     * @param id The ID of the subscription to delete. (required)
     * @return ApiResponse&lt;ModelApiResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ModelApiResponse> deleteSubscriptionWithHttpInfo(String id) throws ApiException {
        com.squareup.okhttp.Call call = deleteSubscriptionValidateBeforeCall(id, null, null);
        Type localVarReturnType = new TypeToken<ModelApiResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Delete a subscription (asynchronously)
     * Delete the specified subscription by closing all its statistics. This is a fire-and-forget operation and it always returns a success response.
     * @param id The ID of the subscription to delete. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteSubscriptionAsync(String id, final ApiCallback<ModelApiResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteSubscriptionValidateBeforeCall(id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ModelApiResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getStatValue
     * @param objectId The ID of the object. (required)
     * @param objectType The type of object to which the statistic is applied. (required)
     * @param statisticName The name of the pre-configured statistic to retrieve. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getStatValueCall(String objectId, String objectType, String statisticName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/statistic-values/{statisticName}"
            .replaceAll("\\{" + "statisticName" + "\\}", apiClient.escapeString(statisticName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (objectId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("objectId", objectId));
        if (objectType != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("objectType", objectType));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getStatValueValidateBeforeCall(String objectId, String objectType, String statisticName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'objectId' is set
        if (objectId == null) {
            throw new ApiException("Missing the required parameter 'objectId' when calling getStatValue(Async)");
        }
        
        // verify the required parameter 'objectType' is set
        if (objectType == null) {
            throw new ApiException("Missing the required parameter 'objectType' when calling getStatValue(Async)");
        }
        
        // verify the required parameter 'statisticName' is set
        if (statisticName == null) {
            throw new ApiException("Missing the required parameter 'statisticName' when calling getStatValue(Async)");
        }
        

        com.squareup.okhttp.Call call = getStatValueCall(objectId, objectType, statisticName, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get the value of a single statistic
     * Get the current value of a statistic from Stat Server.
     * @param objectId The ID of the object. (required)
     * @param objectType The type of object to which the statistic is applied. (required)
     * @param statisticName The name of the pre-configured statistic to retrieve. (required)
     * @return PeekedStatisticResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PeekedStatisticResponse getStatValue(String objectId, String objectType, String statisticName) throws ApiException {
        ApiResponse<PeekedStatisticResponse> resp = getStatValueWithHttpInfo(objectId, objectType, statisticName);
        return resp.getData();
    }

    /**
     * Get the value of a single statistic
     * Get the current value of a statistic from Stat Server.
     * @param objectId The ID of the object. (required)
     * @param objectType The type of object to which the statistic is applied. (required)
     * @param statisticName The name of the pre-configured statistic to retrieve. (required)
     * @return ApiResponse&lt;PeekedStatisticResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PeekedStatisticResponse> getStatValueWithHttpInfo(String objectId, String objectType, String statisticName) throws ApiException {
        com.squareup.okhttp.Call call = getStatValueValidateBeforeCall(objectId, objectType, statisticName, null, null);
        Type localVarReturnType = new TypeToken<PeekedStatisticResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get the value of a single statistic (asynchronously)
     * Get the current value of a statistic from Stat Server.
     * @param objectId The ID of the object. (required)
     * @param objectType The type of object to which the statistic is applied. (required)
     * @param statisticName The name of the pre-configured statistic to retrieve. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getStatValueAsync(String objectId, String objectType, String statisticName, final ApiCallback<PeekedStatisticResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getStatValueValidateBeforeCall(objectId, objectType, statisticName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PeekedStatisticResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getStatValues
     * @param statistics The set of statistics you want to get the values of from Stat Server. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getStatValuesCall(Object statistics, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = statistics;

        // create path and map variables
        String localVarPath = "/operations/get-statistic-ex";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getStatValuesValidateBeforeCall(Object statistics, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'statistics' is set
        if (statistics == null) {
            throw new ApiException("Missing the required parameter 'statistics' when calling getStatValues(Async)");
        }
        

        com.squareup.okhttp.Call call = getStatValuesCall(statistics, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get the values of a set of statistics
     * Get the current value of predefined statistics from Stat Server without a subscription.
     * @param statistics The set of statistics you want to get the values of from Stat Server. (required)
     * @return PeekedStatisticsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PeekedStatisticsResponse getStatValues(Object statistics) throws ApiException {
        ApiResponse<PeekedStatisticsResponse> resp = getStatValuesWithHttpInfo(statistics);
        return resp.getData();
    }

    /**
     * Get the values of a set of statistics
     * Get the current value of predefined statistics from Stat Server without a subscription.
     * @param statistics The set of statistics you want to get the values of from Stat Server. (required)
     * @return ApiResponse&lt;PeekedStatisticsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PeekedStatisticsResponse> getStatValuesWithHttpInfo(Object statistics) throws ApiException {
        com.squareup.okhttp.Call call = getStatValuesValidateBeforeCall(statistics, null, null);
        Type localVarReturnType = new TypeToken<PeekedStatisticsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get the values of a set of statistics (asynchronously)
     * Get the current value of predefined statistics from Stat Server without a subscription.
     * @param statistics The set of statistics you want to get the values of from Stat Server. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getStatValuesAsync(Object statistics, final ApiCallback<PeekedStatisticsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getStatValuesValidateBeforeCall(statistics, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PeekedStatisticsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for peekSubscriptionStats
     * @param id The ID of the subscription. (required)
     * @param statisticIds A comma-delimited list of statistic IDs that belong to the specified subscription. If omitted, the Statistics API returns the current values of all statistics opened within the subscription. If specified, the Statistics API returns values for the statistics with the specified IDs. (optional)
     * @param verbose Specifies whether the Statistics API should return additional information about opened statistics in the response. Possible values are: &#x60;OFF&#x60; and &#x60;INFO&#x60;. (optional, default to INFO)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call peekSubscriptionStatsCall(String id, String statisticIds, String verbose, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{id}/statistic-values"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (statisticIds != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("statisticIds", statisticIds));
        if (verbose != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("verbose", verbose));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call peekSubscriptionStatsValidateBeforeCall(String id, String statisticIds, String verbose, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling peekSubscriptionStats(Async)");
        }
        

        com.squareup.okhttp.Call call = peekSubscriptionStatsCall(id, statisticIds, verbose, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get the values of statistics in a subscription
     * Get the values of a set of statistics that was opened with a subscription.
     * @param id The ID of the subscription. (required)
     * @param statisticIds A comma-delimited list of statistic IDs that belong to the specified subscription. If omitted, the Statistics API returns the current values of all statistics opened within the subscription. If specified, the Statistics API returns values for the statistics with the specified IDs. (optional)
     * @param verbose Specifies whether the Statistics API should return additional information about opened statistics in the response. Possible values are: &#x60;OFF&#x60; and &#x60;INFO&#x60;. (optional, default to INFO)
     * @return StatisticDataResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public StatisticDataResponse peekSubscriptionStats(String id, String statisticIds, String verbose) throws ApiException {
        ApiResponse<StatisticDataResponse> resp = peekSubscriptionStatsWithHttpInfo(id, statisticIds, verbose);
        return resp.getData();
    }

    /**
     * Get the values of statistics in a subscription
     * Get the values of a set of statistics that was opened with a subscription.
     * @param id The ID of the subscription. (required)
     * @param statisticIds A comma-delimited list of statistic IDs that belong to the specified subscription. If omitted, the Statistics API returns the current values of all statistics opened within the subscription. If specified, the Statistics API returns values for the statistics with the specified IDs. (optional)
     * @param verbose Specifies whether the Statistics API should return additional information about opened statistics in the response. Possible values are: &#x60;OFF&#x60; and &#x60;INFO&#x60;. (optional, default to INFO)
     * @return ApiResponse&lt;StatisticDataResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<StatisticDataResponse> peekSubscriptionStatsWithHttpInfo(String id, String statisticIds, String verbose) throws ApiException {
        com.squareup.okhttp.Call call = peekSubscriptionStatsValidateBeforeCall(id, statisticIds, verbose, null, null);
        Type localVarReturnType = new TypeToken<StatisticDataResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get the values of statistics in a subscription (asynchronously)
     * Get the values of a set of statistics that was opened with a subscription.
     * @param id The ID of the subscription. (required)
     * @param statisticIds A comma-delimited list of statistic IDs that belong to the specified subscription. If omitted, the Statistics API returns the current values of all statistics opened within the subscription. If specified, the Statistics API returns values for the statistics with the specified IDs. (optional)
     * @param verbose Specifies whether the Statistics API should return additional information about opened statistics in the response. Possible values are: &#x60;OFF&#x60; and &#x60;INFO&#x60;. (optional, default to INFO)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call peekSubscriptionStatsAsync(String id, String statisticIds, String verbose, final ApiCallback<StatisticDataResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = peekSubscriptionStatsValidateBeforeCall(id, statisticIds, verbose, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<StatisticDataResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
